version: '3.8'

services:
  laravel:
    build: ./backend/laravelBackend
    volumes:
      - ./backend/laravelBackend:/var/www/html
    ports:
      - "5001:9000"
    depends_on:
      - pgsql
    networks:
      - app-network

  node:
    build: ./backend/nodeBackend
    volumes:
      - ./backend/nodeBackend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001-3005:3001-3005"
    environment:
      - PORT=3001
      - NODE_ENV=development
    restart: "no"
    depends_on:
      - mongo
    networks:
      - app-network
  
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/laravelBackend:/var/www/html
    ports:
      - "80:80" 
    depends_on:
      - laravel
      - node
    networks:
      - app-network


  pgsql:
    image: postgres:16
    container_name: local_pgdb
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: 
      POSTGRES_USER: 
      POSTGRES_PASSWORD: 
    volumes:
      - pgsql_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    environment:
      PGADMIN_DEFAULT_EMAIL: 
      PGADMIN_DEFAULT_PASSWORD: 
    ports:
      - "5050:80"
    depends_on:
      - pgsql
    networks:
      - app-network

  mongo:
    image: mongo:7
    container_name: mongo_node
    ports:
      - "27018:27017"
    volumes:
      - mongodb:/data/db
    networks:
      - app-network
    command: ["--replSet", "rs0"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  mongo-init:
    image: mongo:7
    depends_on:
      - mongo
    networks:
      - app-network
    restart: "no"
    entrypoint: >
      bash -c "
      sleep 5;
      mongosh --host mongo_node --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [{ _id: 0, host: \"mongo_node:27017\" }]
        });
      '"

  redis:
    image: redis:7
    container_name: redis_server1
    ports:
      - "6379:6379"
    networks:
      - app-network

volumes:
  pgsql_data:
  mongodb:

networks:
  app-network:
    driver: bridge
